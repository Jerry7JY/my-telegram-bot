import os
import asyncio
import datetime
import time
import json
import requests
from io import BytesIO
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import FSInputFile
import supabase
from supabase import create_client
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv("BOT_TOKEN")
SUPABASE_URL = os.getenv("SUPABASE_URL")
SUPABASE_KEY = os.getenv("SUPABASE_KEY")
# –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤ (5 —á–µ–ª–æ–≤–µ–∫)
ADMIN_IDS = [
    1880252075,  # –í—ã (–æ—Å–Ω–æ–≤–Ω–æ–π –∞–¥–º–∏–Ω)
    1099113770,  # –ê–¥–º–∏–Ω 2 (–ú–∏—Ö–∞–∏–ª –ì–∞–ø–æ–Ω–æ–≤)
    843508960,   # –ê–¥–º–∏–Ω 3 (–ú–∏–ª–ª–µ—Ä –ï–∫–∞—Ç–µ—Ä–∏–Ω–∞)
    1121472787,  # –ê–¥–º–∏–Ω 4 (–°–Ω–∞–ø–∫–æ–≤ –î–º–∏—Ç—Ä–∏–π)
    888999000    # –ê–¥–º–∏–Ω 5 (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π ID)
]

# –†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞
SBER_ACCOUNT = "4276380208397583"
BANK_DETAILS = f"""
üè¶ <b>–†–ï–ö–í–ò–ó–ò–¢–´ –î–õ–Ø –ü–ï–†–ï–í–û–î–ê</b>

<b>–ë–∞–Ω–∫:</b> –°–±–µ—Ä–±–∞–Ω–∫
<b>–ù–æ–º–µ—Ä —Å—á–µ—Ç–∞:</b> 
<code>{SBER_ACCOUNT}</code>

üí° <b>–°–æ–≤–µ—Ç:</b> –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –Ω–æ–º–µ—Ä —Å—á–µ—Ç–∞ –≤—ã—à–µ –∏ –≤—Å—Ç–∞–≤—å—Ç–µ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –±–∞–Ω–∫–∞
"""

# –ü—É—Ç—å –∫ –∫–∞—Ä—Ç–∏–Ω–∫–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è - –£–ë–ï–î–ò–¢–ï–°–¨ –ß–¢–û –§–ê–ô–õ –°–£–©–ï–°–¢–í–£–ï–¢!
EVENT_IMAGE_PATH = "event_image.jpg"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–∞–π–ª–æ–≤
MAX_FILE_SIZE = 20 * 1024 * 1024  # 20MB –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
SUPPORTED_DOCUMENT_TYPES = ['.pdf', '.jpg', '.jpeg', '.png']

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Supabase
try:
    supabase_client = create_client(SUPABASE_URL, SUPABASE_KEY)
    print("‚úÖ Supabase –ø–æ–¥–∫–ª—é—á–µ–Ω —É—Å–ø–µ—à–Ω–æ")
except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Supabase: {e}")
    supabase_client = None

# –§–£–ù–ö–¶–ò–ò –î–õ–Ø –†–ê–ë–û–¢–´ –° SUPABASE STORAGE
async def upload_receipt_to_supabase(bot: Bot, file_id: str, file_type: str, order_id: int, user_data: dict):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —á–µ–∫ –≤ Supabase Storage –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç URL"""
    try:
        print(f"üì§ –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É —á–µ–∫–∞ –≤ Supabase Storage –¥–ª—è –∑–∞–∫–∞–∑–∞ #{order_id}...")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª –æ—Ç Telegram
        file = await bot.get_file(file_id)
        file_path = file.file_path
        
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
        file_url = f"https://api.telegram.org/file/bot{BOT_TOKEN}/{file_path}"
        response = requests.get(file_url)
        
        if response.status_code == 200:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –∏ MIME —Ç–∏–ø
            if file_type == 'document':
                file_extension = ".pdf"
                mime_type = "application/pdf"
            else:  # photo
                file_extension = ".jpg" 
                mime_type = "image/jpeg"
            
            # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
            file_name = f"receipt_order_{order_id}_{user_data['user_id']}{file_extension}"
            
            print(f"üìÅ –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª: {file_name}")
            print(f"üìè –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {len(response.content)} –±–∞–π—Ç")
            
            try:
                # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤ Supabase Storage
                result = supabase_client.storage.from_("receipts").upload(
                    file_name,
                    response.content,
                    {"content-type": mime_type}
                )
                
                if result:
                    print(f"‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –≤ Supabase Storage: {file_name}")
                    
                    # –ü–æ–ª—É—á–∞–µ–º –ø—É–±–ª–∏—á–Ω—ã–π URL
                    public_url = supabase_client.storage.from_("receipts").get_public_url(file_name)
                    
                    # –û–ë–ù–û–í–õ–Ø–ï–ú –ó–ê–ü–ò–°–¨ –í SUPABASE –° –°–°–´–õ–ö–û–ô –ù–ê –§–ê–ô–õ
                    supabase_client.table("orders")\
                        .update({
                            "receipt_file_name": file_name,
                            "receipt_file_url": public_url
                        })\
                        .eq("id", order_id)\
                        .execute()
                    
                    return {
                        "file_name": file_name,
                        "public_url": public_url,
                        "file_size": len(response.content)
                    }
                else:
                    print("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤ Supabase Storage - —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—É—Å—Ç–æ–π")
                    return None
                    
            except Exception as upload_error:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤ Supabase Storage: {upload_error}")
                return None
                
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞ –∏–∑ Telegram: {response.status_code}")
            return None
            
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤ Supabase: {e}")
        return None

def create_receipts_bucket():
    """–°–æ–∑–¥–∞–µ—Ç bucket –¥–ª—è —á–µ–∫–æ–≤ –≤ Supabase Storage"""
    try:
        # –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å bucket –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        buckets = supabase_client.storage.list_buckets()
        bucket_names = [bucket.name for bucket in buckets]
        
        if "receipts" not in bucket_names:
            result = supabase_client.storage.create_bucket("receipts", {
                "public": True,  # –î–µ–ª–∞–µ–º —Ñ–∞–π–ª—ã –ø—É–±–ª–∏—á–Ω—ã–º–∏ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
                "file_size_limit": 20971520  # 20MB
            })
            print("‚úÖ Bucket 'receipts' —Å–æ–∑–¥–∞–Ω –≤ Supabase Storage")
        else:
            print("‚úÖ Bucket 'receipts' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è bucket: {e}")
        return False

async def get_supabase_file_info(order_id: int):
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ –≤ Supabase Storage –ø–æ ID –∑–∞–∫–∞–∑–∞"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ –∏–∑ Supabase
        order = db.get_order_by_id(order_id)
        if not order:
            print(f"‚ùå –ó–∞–∫–∞–∑ #{order_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ Supabase")
            return None
            
        print(f"üîç –ü–æ–∏—Å–∫ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∑–∞–∫–∞–∑–∞ #{order_id}...")
        
        # –ò—â–µ–º —Ñ–∞–π–ª—ã –≤ Storage –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É –∏–º–µ–Ω–∏
        files = supabase_client.storage.from_("receipts").list()
        
        target_pattern = f"receipt_order_{order_id}_"
        found_files = []
        
        for file in files:
            print(f"üìÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–∞: {file['name']}")
            if target_pattern in file['name']:
                found_files.append(file)
        
        if found_files:
            # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –Ω–∞–π–¥–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            file = found_files[0]
            public_url = supabase_client.storage.from_("receipts").get_public_url(file['name'])
            
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω —Ñ–∞–π–ª: {file['name']}")
            print(f"üîó –ü—É–±–ª–∏—á–Ω—ã–π URL: {public_url}")
            
            return {
                'file_name': file['name'],
                'public_url': public_url,
                'size': file.get('metadata', {}).get('size', 0),
                'mime_type': file.get('metadata', {}).get('mimetype', 'unknown')
            }
        else:
            print(f"‚ùå –§–∞–π–ª—ã –¥–ª—è –∑–∞–∫–∞–∑–∞ #{order_id} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return None
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Ñ–∞–π–ª–∞ –≤ Supabase: {e}")
        return None

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è (—Ç–æ–ª—å–∫–æ –≤ —Ñ–∞–π–ª, –±–µ–∑ SQLite)
def log_event(user_id, username, action, details=""):
    """–ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –õ–û–ì–ò–†–û–í–ê–ù–ò–ï –í–°–ï–• –î–ï–ô–°–¢–í–ò–ô (—Ç–æ–ª—å–∫–æ —Ñ–∞–π–ª)"""
    moscow_time = datetime.datetime.now()
    timestamp = moscow_time.strftime("%d.%m.%Y %H:%M:%S MSK")
    log_message = f"[{timestamp}] üë§ User {user_id} ({username}) - {action}"
    if details:
        log_message += f" - {details}"
    print("üîπ " + log_message)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
    with open("bot_log.txt", "a", encoding="utf-8") as f:
        f.write(log_message + "\n")

def log_tariff_selection(user_id, username, tariff_name, tariff_data):
    """–ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –õ–û–ì–ò–†–û–í–ê–ù–ò–ï –í–´–ë–û–†–ê –¢–ê–†–ò–§–ê"""
    price_info = f"{tariff_data['price']}‚ÇΩ" 
    if 'total' in tariff_data:
        price_info += f" (–≤—Å–µ–≥–æ {tariff_data['total']}‚ÇΩ)"
    
    log_event(user_id, username, "üé´ –í–´–ë–†–ê–õ(-–∞) –¢–ê–†–ò–§", 
              f"'{tariff_name}' - {price_info} - {tariff_data['min_people']} —á–µ–ª.")

def log_payment_start(user_id, username, tariff_name, participants, total_price):
    """–ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –õ–û–ì–ò–†–û–í–ê–ù–ò–ï –ù–ê–ß–ê–õ–ê –û–ü–õ–ê–¢–´"""
    log_event(user_id, username, "üí≥ –ù–ê–ß–ê–õ(-–∞) –û–ü–õ–ê–¢–£",
              f"–¢–∞—Ä–∏—Ñ: {tariff_name}, –£—á–∞—Å—Ç–Ω–∏–∫–∏: {len(participants)}, –°—É–º–º–∞: {total_price}‚ÇΩ")

def log_admin_action(user_id, username, action, details=""):
    """–õ–û–ì–ò–†–û–í–ê–ù–ò–ï –î–ï–ô–°–¢–í–ò–ô –ê–î–ú–ò–ù–ê (—Ç–æ–ª—å–∫–æ —Ñ–∞–π–ª)"""
    moscow_time = datetime.datetime.now()
    timestamp = moscow_time.strftime("%d.%m.%Y %H:%M:%S MSK")
    log_message = f"[{timestamp}] üë®‚Äçüíº ADMIN {user_id} ({username}) - {action}"
    if details:
        log_message += f" - {details}"
    print("üî∏ " + log_message)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
    with open("admin_log.txt", "a", encoding="utf-8") as f:
        f.write(log_message + "\n")

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class OrderStates(StatesGroup):
    waiting_for_event = State()
    waiting_for_tariff = State()
    waiting_for_participants = State()
    waiting_for_payment = State()
    waiting_for_receipt = State()

# –¢–∞—Ä–∏—Ñ—ã
TARIFFS = {
    "–ï–¥–∏–Ω–æ–ª–∏—á–Ω—ã–π": {
        "price": 2000,
        "gender": "male",
        "description": "–í—ã - —Å–∏–ª—å–Ω—ã–π –º—É–∂—á–∏–Ω–∞ –æ–¥–∏–Ω–æ—á–∫–∞ –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–µ —Å—É–ø–µ—Ä —Å–æ—Ü–∏–∞–ª—å–Ω—ã–π, –∏–ª–∏ –µ—Å–ª–∏ –∂–µ –º—É–∂—Å–∫–∞—è —ç–Ω–µ—Ä–≥–∏—è –≤–∞—Å –Ω–µ –¥–µ—Ä–∂–∏—Ç –Ω–∞ —ç—Ç–æ–π –∑–µ–º–ª–µ, —Ç–æ —ç—Ç–æ –≤–∞—à —à–∞–Ω—Å –ø–æ–∫–∞–∑–∞—Ç—å –∫—Ç–æ –∑–¥–µ—Å—å –ª–µ–≤ ü¶Å, –Ω–æ —Å —É–≤–∞–∂–µ–Ω–∏–µ–º",
        "max_people": 1,
        "min_people": 1,
        "emoji": "üë§",
        "includes": "–í—Å–µ –≤–∫–ª—é—á–µ–Ω–æ –≤ –ª–æ—Ñ—Ç–µ"
    },
    "–õ–î": {
        "price": 1750,
        "gender": "male", 
        "description": "–î–≤–∞ –¥—Ä—É–≥–∞, –ø—Ä–∏—à–ª–∏ –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ–º, —á—Ç–æ –∫—Ä–µ–ø–∫—É—é –º—É–∂—Å–∫—É—é –¥—Ä—É–∂–±—É –Ω–∏—á–µ–≥–æ –Ω–µ –∑–∞–º–µ–Ω–∏—Ç",
        "max_people": 2,
        "min_people": 2,
        "total": 3500,
        "emoji": "üë•",
        "includes": "–í—Å–µ –≤–∫–ª—é—á–µ–Ω–æ –≤ –ª–æ—Ñ—Ç–µ"
    },
    "–ö–æ–º–ø–∞–Ω–∏—è –¥—Ä—É–∑–µ–π": {
        "price": 1625,
        "gender": "male",
        "description": "–ò—Ö –±—ã–ª–æ —á–µ—Ç–≤–µ—Ä–æ‚Ä¶",
        "max_people": 4,
        "min_people": 4,
        "total": 6500,
        "emoji": "üë•üë•",
        "includes": "–í—Å–µ –≤–∫–ª—é—á–µ–Ω–æ –≤ –ª–æ—Ñ—Ç–µ"
    },
    "–°–∏–ª—å–Ω–∞—è –∏ –Ω–µ–∑–∞–≤–∏—Å–∏–º–∞—è": {
        "price": 1500,
        "gender": "female",
        "description": "–í—ã - —Å–µ–ª—Ñ–º–µ–π–¥ –≤—É–º–µ–Ω",
        "max_people": 1,
        "min_people": 1,
        "emoji": "üßç‚Äç‚ôÄÔ∏è",
        "includes": "–í—Å–µ –≤–∫–ª—é—á–µ–Ω–æ –≤ –ª–æ—Ñ—Ç–µ."
    },
    "–õ–ü": {
        "price": 1250,
        "gender": "female",
        "description": "–í–∞—Å –¥–µ—Ä–∂–∏—Ç –≤–º–µ—Å—Ç–µ –∂–µ–ª–∞–Ω–∏–µ –∑–∞–≤–æ–µ–≤–∞—Ç—å –≤–µ—Å—å —Å–≤–µ—Ç —Å–≤–æ–µ–π –∫—Ä–∞—Å–æ—Ç–æ–π –Ω—É –∏ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ –µ—â—ë –∏ —Å—ç–∫–æ–Ω–æ–º–∏—Ç—å",
        "max_people": 2,
        "min_people": 2,
        "total": 2500,
        "emoji": "üë≠",
        "includes": "–í—Å–µ –≤–∫–ª—é—á–µ–Ω–æ –≤ –ª–æ—Ñ—Ç–µ."
    },
    "–°–µ—Ä–ø–µ–Ω—Ç–∞—Ä–∏–π": {
        "price": 1125,
        "gender": "female", 
        "description": "–í—ã –Ω–∞–∫–æ–Ω–µ—Ü-—Ç–æ –≤—ã–ø–æ–ª–∑–ª–∏ –∏–∑ —Å–≤–æ–∏—Ö –Ω–æ—Ä–æ–∫ –∏ –ø—Ä–∏–µ—Ö–∞–ª–∏ —Ä–∞–∑–¥–∞—Ç—å —Å–≤–∞–≥–∏ –∏ –ø–æ–æ–±—Å—É–∂–¥–∞—Ç—å –≤—Å–µ –Ω–∞ —Å–≤–µ—Ç–µ",
        "max_people": 4,
        "min_people": 4,
        "total": 4500,
        "emoji": "üë≠üë≠",
        "includes": "–í—Å–µ –≤–∫–ª—é—á–µ–Ω–æ –≤ –ª–æ—Ñ—Ç–µ."
    },
    "–ò–Ω—å-—è–Ω—å": {
        "price": 1500,
        "gender": "couple",
        "description": "–í—ã –ø–∞—Ä–∞ üíû, –ø—Ä–∏—à–ª–∏‚Ä¶ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –º–∏—Ä—É –≤–∞—à—É –ª—é–±–æ–≤—å",
        "max_people": 2,
        "min_people": 2,
        "total": 3000,
        "emoji": "üë©‚Äç‚ù§Ô∏è‚Äçüë®",
        "includes": "–í—Å–µ –≤–∫–ª—é—á–µ–Ω–æ –≤ –ª–æ—Ñ—Ç–µ."
    }
}

class Database:
    def __init__(self):
        self.supabase = supabase_client
        self.auto_create_table()
    
    def auto_create_table(self):
        """–ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –°–û–ó–î–ê–ù–ò–ï –¢–ê–ë–õ–ò–¶–´ –ü–†–ò –ü–ï–†–í–û–ú –ó–ê–ü–£–°–ö–ï"""
        try:
            result = self.supabase.table("orders").select("id").limit(1).execute()
            print("‚úÖ –¢–∞–±–ª–∏—Ü–∞ orders —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            return True
        except Exception as e:
            print("üîÑ –¢–∞–±–ª–∏—Ü–∞ orders –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, —Å–æ–∑–¥–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏...")
            return self.create_orders_table()
    
    def create_orders_table(self):
        """–ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –°–û–ó–î–ê–ù–ò–ï –¢–ê–ë–õ–ò–¶–´ –ß–ï–†–ï–ó SQL"""
        try:
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—É—é —Ç–∞–±–ª–∏—Ü—É —á–µ—Ä–µ–∑ –≤—Å—Ç–∞–≤–∫—É —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            test_data = {
                "user_id": 1,
                "username": "test",
                "tariff": "test",
                "participants": [{"full_name": "test", "telegram": "@test", "phone": "79990000000"}],
                "total_price": 1000,
                "status": "test"
            }
            
            result = self.supabase.table("orders").insert(test_data).execute()
            print("‚úÖ –¢–∞–±–ª–∏—Ü–∞ orders —Å–æ–∑–¥–∞–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏")
            
            # –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
            if result.data:
                self.supabase.table("orders").delete().eq("id", result.data[0]['id']).execute()
            
            return True
        except Exception as e:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏: {e}")
            print("üí° –°–æ–∑–¥–∞–π—Ç–µ —Ç–∞–±–ª–∏—Ü—É –≤—Ä—É—á–Ω—É—é –≤ Supabase Dashboard")
            return False
    
    def add_order(self, user_id, username, tariff, participants, total_price):
        """–°–û–•–†–ê–ù–ï–ù–ò–ï –ó–ê–ö–ê–ó–ê –í SUPABASE"""
        try:
            data = {
                "user_id": user_id,
                "username": username or "unknown",
                "tariff": tariff,
                "participants": participants,
                "total_price": total_price,
                "status": "pending",
                "receipt_verified": False
            }
            
            print(f"üíæ –°–û–•–†–ê–ù–ï–ù–ò–ï –∑–∞–∫–∞–∑–∞ –≤ Supabase...")
            
            result = self.supabase.table("orders").insert(data).execute()
            
            if result.data:
                order_id = result.data[0]['id']
                print(f"‚úÖ –ó–∞–∫–∞–∑ #{order_id} —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ Supabase")
                log_event(user_id, username, "üíæ –°–û–•–†–ê–ù–ï–ù–ò–ï –í –ë–î", f"ID: {order_id}")
                return result.data[0]
            else:
                print("‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –Ω–µ –≤–µ—Ä–Ω—É–ª–∏—Å—å –æ—Ç Supabase")
                return None
                
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞: {e}")
            log_event(user_id, username, "‚ùå –û–®–ò–ë–ö–ê –°–û–•–†–ê–ù–ï–ù–ò–Ø", str(e))
            return None
    
    def update_order_status(self, order_id, status, receipt_verified=False):
        """–û–ë–ù–û–í–õ–ï–ù–ò–ï –°–¢–ê–¢–£–°–ê –ó–ê–ö–ê–ó–ê –í SUPABASE"""
        try:
            update_data = {"status": status}
            if receipt_verified:
                update_data["receipt_verified"] = True
                
            result = self.supabase.table("orders")\
                .update(update_data)\
                .eq("id", order_id)\
                .execute()
            
            if result.data:
                print(f"‚úÖ –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ {order_id} –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ '{status}'")
                return result.data[0]
            return None
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}")
            return None
    
    def get_order_by_id(self, order_id):
        """–ü–û–õ–£–ß–ï–ù–ò–ï –ó–ê–ö–ê–ó–ê –ò–ó SUPABASE"""
        try:
            result = self.supabase.table("orders")\
                .select("*")\
                .eq("id", order_id)\
                .execute()
            
            if result.data:
                return result.data[0]
            return None
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞: {e}")
            return None
    
    def get_all_orders(self, limit=100):
        """–ü–û–õ–£–ß–ï–ù–ò–ï –í–°–ï–• –ó–ê–ö–ê–ó–û–í –ò–ó SUPABASE"""
        try:
            result = self.supabase.table("orders")\
                .select("*")\
                .order("created_at", desc=True)\
                .limit(limit)\
                .execute()
            
            return result.data or []
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤: {e}")
            return []
    
    def get_pending_orders(self):
        """–ü–û–õ–£–ß–ï–ù–ò–ï –û–ñ–ò–î–ê–Æ–©–ò–• –ó–ê–ö–ê–ó–û–í –ò–ó SUPABASE"""
        try:
            result = self.supabase.table("orders")\
                .select("*")\
                .eq("status", "pending")\
                .order("created_at", desc=True)\
                .execute()
            
            return result.data or []
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è pending –∑–∞–∫–∞–∑–æ–≤: {e}")
            return []
    
    def get_paid_orders(self):
        """–ü–û–õ–£–ß–ï–ù–ò–ï –û–ü–õ–ê–ß–ï–ù–ù–´–• –ó–ê–ö–ê–ó–û–í –ò–ó SUPABASE"""
        try:
            result = self.supabase.table("orders")\
                .select("*")\
                .eq("status", "paid")\
                .order("created_at", desc=True)\
                .execute()
            
            return result.data or []
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è paid –∑–∞–∫–∞–∑–æ–≤: {e}")
            return []
    
    def get_statistics(self):
        """–ü–û–õ–£–ß–ï–ù–ò–ï –°–¢–ê–¢–ò–°–¢–ò–ö–ò –ò–ó SUPABASE"""
        try:
            # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤
            result_total = self.supabase.table("orders").select("id", count="exact").execute()
            total_orders = result_total.count or 0
            
            # –û–ø–ª–∞—á–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã
            result_paid = self.supabase.table("orders").select("id", count="exact").eq("status", "paid").execute()
            paid_orders = result_paid.count or 0
            
            # –û–∂–∏–¥–∞—é—â–∏–µ –∑–∞–∫–∞–∑—ã
            result_pending = self.supabase.table("orders").select("id", count="exact").eq("status", "pending").execute()
            pending_orders = result_pending.count or 0
            
            # –û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞
            result_revenue = self.supabase.table("orders").select("total_price").eq("status", "paid").execute()
            total_revenue = sum(order['total_price'] for order in result_revenue.data) if result_revenue.data else 0
            
            # –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
            result_users = self.supabase.table("orders").select("user_id").execute()
            unique_users = len(set(order['user_id'] for order in result_users.data)) if result_users.data else 0
            
            # –ó–∞–∫–∞–∑—ã –∑–∞ —Å–µ–≥–æ–¥–Ω—è
            today = datetime.datetime.now().strftime('%Y-%m-%d')
            result_today = self.supabase.table("orders").select("id", count="exact").gte("created_at", f"{today}T00:00:00").lt("created_at", f"{today}T23:59:59").execute()
            today_orders = result_today.count or 0
            
            # –í—ã—Ä—É—á–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
            result_today_revenue = self.supabase.table("orders").select("total_price").eq("status", "paid").gte("created_at", f"{today}T00:00:00").lt("created_at", f"{today}T23:59:59").execute()
            today_revenue = sum(order['total_price'] for order in result_today_revenue.data) if result_today_revenue.data else 0
            
            return {
                'total_orders': total_orders,
                'paid_orders': paid_orders,
                'pending_orders': pending_orders,
                'total_revenue': total_revenue,
                'unique_users': unique_users,
                'today_orders': today_orders,
                'today_revenue': today_revenue
            }
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–∑ Supabase: {e}")
            return {}

# –°–û–ó–î–ê–ï–ú –≠–ö–ó–ï–ú–ü–õ–Ø–† –ë–ê–ó–´ –î–ê–ù–ù–´–•
db = Database()

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∞
def is_admin(user_id):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º"""
    return user_id in ADMIN_IDS

# –ö–û–ú–ê–ù–î–ê /start
@dp.message(Command("start"))
async def cmd_start(message: types.Message, state: FSMContext):
    await state.clear()
    await show_main_menu(message)

# –ö–û–ú–ê–ù–î–ê /reset
@dp.message(Command("reset"))
async def cmd_reset(message: types.Message, state: FSMContext):
    """–°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM"""
    await state.clear()
    await message.answer("‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–±—Ä–æ—à–µ–Ω–æ. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å /start")
    log_event(message.from_user.id, message.from_user.username, "üîÑ –°–ë–†–û–° –°–û–°–¢–û–Ø–ù–ò–Ø FSM")

# –ö–û–ú–ê–ù–î–ê –î–õ–Ø –ü–ï–†–ï–°–û–ó–î–ê–ù–ò–Ø –ë–ê–ó–´ –î–ê–ù–ù–´–•
@dp.message(Command("recreate_db"))
async def cmd_recreate_db(message: types.Message):
    """–ü–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return
    
    log_admin_action(message.from_user.id, message.from_user.username, "üîÑ –ü–ï–†–ï–°–û–ó–î–ê–ù–ò–ï –ë–ê–ó–´ –î–ê–ù–ù–´–•")
    
    try:
        # –£–¥–∞–ª—è–µ–º –≤—Å–µ –∑–∞–∫–∞–∑—ã –∏–∑ Supabase
        result = supabase_client.table("orders").delete().neq("id", 0).execute()
        await message.answer("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω–∞!")
        
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏—è –±–∞–∑—ã: {e}")

# –ö–û–ú–ê–ù–î–ê –î–õ–Ø –ü–†–û–í–ï–†–ö–ò SUPABASE STORAGE
@dp.message(Command("check_storage"))
async def cmd_check_storage(message: types.Message):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è Supabase Storage"""
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return
    
    log_admin_action(message.from_user.id, message.from_user.username, "üîç –ü–†–û–í–ï–†–ö–ê SUPABASE STORAGE")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase
        if not supabase_client:
            await message.answer("‚ùå Supabase –∫–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º bucket receipts
        buckets = supabase_client.storage.list_buckets()
        bucket_names = [bucket.name for bucket in buckets]
        
        storage_info = "<b>üîç –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û SUPABASE STORAGE</b>\n\n"
        
        if "receipts" in bucket_names:
            storage_info += "‚úÖ Bucket 'receipts' —Å—É—â–µ—Å—Ç–≤—É–µ—Ç\n"
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤
            files = supabase_client.storage.from_("receipts").list()
            storage_info += f"üìÅ –§–∞–π–ª–æ–≤ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ: {len(files)}\n\n"
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Ñ–∞–π–ª–æ–≤
            if files:
                storage_info += "<b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Ñ–∞–π–ª–æ–≤:</b>\n"
                for file in files[:5]:
                    file_size = file.get('metadata', {}).get('size', 0)
                    file_size_mb = f"{file_size / (1024*1024):.2f}MB" if file_size > 0 else "unknown"
                    storage_info += f"‚Ä¢ {file['name']} ({file_size_mb})\n"
            else:
                storage_info += "üì≠ –§–∞–π–ª–æ–≤ –Ω–µ—Ç\n"
                
        else:
            storage_info += "‚ùå Bucket 'receipts' –Ω–µ –Ω–∞–π–¥–µ–Ω\n"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª–∏—Ç–∏–∫–∏ –¥–æ—Å—Ç—É–ø–∞
        storage_info += f"\n<b>–ü–æ–ª–∏—Ç–∏–∫–∏ –¥–æ—Å—Ç—É–ø–∞:</b>\n"
        storage_info += "‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ bucket 'receipts' –ø—É–±–ª–∏—á–Ω—ã–π\n"
        storage_info += "‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–ª–∏—Ç–∏–∫–∏ –≤ Supabase Dashboard\n"
        
        await message.answer(storage_info, parse_mode="HTML")
        
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ storage: {e}")

# –ö–û–ú–ê–ù–î–ê –î–õ–Ø –ü–ï–†–ï–°–û–ó–î–ê–ù–ò–Ø BUCKET
@dp.message(Command("recreate_bucket"))
async def cmd_recreate_bucket(message: types.Message):
    """–ü–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ bucket –≤ Supabase Storage"""
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return
    
    log_admin_action(message.from_user.id, message.from_user.username, "üîÑ –ü–ï–†–ï–°–û–ó–î–ê–ù–ò–ï BUCKET")
    
    try:
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π bucket –µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        try:
            supabase_client.storage.delete_bucket("receipts")
            await message.answer("‚úÖ –°—Ç–∞—Ä—ã–π bucket —É–¥–∞–ª–µ–Ω")
        except:
            await message.answer("‚ÑπÔ∏è –°—Ç–∞—Ä–æ–≥–æ bucket –Ω–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–ª–æ")
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π bucket
        result = supabase_client.storage.create_bucket("receipts", {
            "public": True,
            "file_size_limit": 20971520  # 20MB
        })
        
        if result:
            await message.answer("‚úÖ –ù–æ–≤—ã–π bucket 'receipts' —Å–æ–∑–¥–∞–Ω!\n\n"
                               "üìã <b>–¢–µ–ø–µ—Ä—å –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–æ–ª–∏—Ç–∏–∫–∏ –¥–æ—Å—Ç—É–ø–∞:</b>\n"
                               "1. –ó–∞–π–¥–∏—Ç–µ –≤ Supabase Dashboard ‚Üí Storage\n"
                               "2. –í—ã–±–µ—Ä–∏—Ç–µ bucket 'receipts'\n"
                               "3. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ Policies\n"
                               "4. –î–æ–±–∞–≤—å—Ç–µ –ø–æ–ª–∏—Ç–∏–∫–∏:\n"
                               "   ‚Ä¢ SELECT: 'Allow public read access'\n"
                               "   ‚Ä¢ INSERT: 'Allow authenticated insert'", 
                               parse_mode="HTML")
        else:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å bucket")
            
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏—è bucket: {e}")

# –ö–û–ú–ê–ù–î–ê –î–õ–Ø –û–¢–õ–ê–î–ö–ò –ó–ê–ö–ê–ó–ê
@dp.message(Command("debug_order"))
async def cmd_debug_order(message: types.Message):
    """–û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ"""
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return
    
    try:
        args = message.text.split()
        if len(args) < 2:
            await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /debug_order <order_id>")
            return
        
        order_id = args[1]
        
        if not order_id.isdigit():
            await message.answer("‚ùå Order ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
            return
        
        order = db.get_order_by_id(int(order_id))
        if not order:
            await message.answer(f"‚ùå –ó–∞–∫–∞–∑ #{order_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ Supabase")
            return
        
        debug_text = f"""
<b>üîß –û–¢–õ–ê–î–û–ß–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø –î–õ–Ø –ó–ê–ö–ê–ó–ê #{order_id}</b>

üìä <b>Supabase –¥–∞–Ω–Ω—ã–µ:</b>
‚Ä¢ ID: {order['id']}
‚Ä¢ User ID: {order['user_id']}
‚Ä¢ Username: @{order['username']}
‚Ä¢ –¢–∞—Ä–∏—Ñ: {order['tariff']}
‚Ä¢ –°—É–º–º–∞: {order['total_price']}‚ÇΩ
‚Ä¢ –°—Ç–∞—Ç—É—Å: {order['status']}
‚Ä¢ –§–∞–π–ª: {order.get('receipt_file_name', '‚ùå –ù–ï–¢')}
‚Ä¢ URL: {order.get('receipt_file_url', '‚ùå –ù–ï–¢')}

üîç <b>–ü–æ–∏—Å–∫ –≤ Supabase Storage:</b>
"""
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–∞ –≤ Supabase
        supabase_file_info = await get_supabase_file_info(int(order_id))
        if supabase_file_info:
            debug_text += f"‚úÖ –§–∞–π–ª –Ω–∞–π–¥–µ–Ω: {supabase_file_info['file_name']}\n"
            debug_text += f"üîó URL: {supabase_file_info['public_url']}\n"
            debug_text += f"üìè –†–∞–∑–º–µ—Ä: {supabase_file_info['size']} –±–∞–π—Ç\n"
        else:
            debug_text += "‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ Supabase Storage\n"
        
        await message.answer(debug_text, parse_mode="HTML", disable_web_page_preview=True)
        
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ª–∞–¥–∫–∏: {e}")

# –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ
async def show_main_menu(message: types.Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏"""
    log_event(message.from_user.id, message.from_user.username, "üöÄ –ó–ê–ü–£–°–¢–ò–õ(-–∞) –ë–û–¢–ê")
    
    keyboard = [
        [types.KeyboardButton(text="üöÄ –°—Ç–∞—Ä—Ç")],
        [types.KeyboardButton(text="üìÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏")],
        [types.KeyboardButton(text="üé´ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–∞—Ä–∏—Ñ—ã"), types.KeyboardButton(text="üí¨ –ü–æ–º–æ—â—å")]
    ]
    
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω - –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
    if is_admin(message.from_user.id):
        keyboard.append([types.KeyboardButton(text="üë®‚Äçüíº –ö–æ–Ω—Å–æ–ª—å –ê–¥–º–∏–Ω–∞")])
    
    markup = types.ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)
    
    welcome_text = """
<b>üé´ –û–§–ò–¶–ò–ê–õ–¨–ù–´–ô –ë–û–¢ –î–õ–Ø –ü–û–ö–£–ü–ö–ò –ë–ò–õ–ï–¢–û–í –û–¢ GEDAN</b>

–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –±–∏–ª–µ—Ç—ã –Ω–∞ –Ω–∞—à–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è.
–í—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª –Ω–∏–∂–µ üëá
    """
    
    await message.answer(welcome_text, reply_markup=markup, parse_mode="HTML")

# –ö–ù–û–ü–ö–ê –°–¢–ê–†–¢
@dp.message(F.text == "üöÄ –°—Ç–∞—Ä—Ç")
async def button_start(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –°—Ç–∞—Ä—Ç"""
    log_event(message.from_user.id, message.from_user.username, "üîÑ –ù–ê–ñ–ê–õ(-–∞) '–°–¢–ê–†–¢'")
    
    await state.clear()
    
    welcome_text = """
<b>üé´ –î–û–ë–†–û –ü–û–ñ–ê–õ–û–í–ê–¢–¨ –í –û–§–ò–¶–ò–ê–õ–¨–ù–´–ô –ë–û–¢ GEDAN!</b>

–Ø - —Ç–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫ –≤ –º–∏—Ä–µ –Ω–µ–∑–∞–±—ã–≤–∞–µ–º—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π! üé≠

‚ú® <b>–ß—Ç–æ —è —É–º–µ—é:</b>
‚Ä¢ –ü—Ä–æ–¥–∞–≤–∞—Ç—å –±–∏–ª–µ—Ç—ã –Ω–∞ –ª—É—á—à–∏–µ –≤–µ—á–µ—Ä–∏–Ω–∫–∏ GEDAN
‚Ä¢ –ü–æ–º–æ–≥–∞—Ç—å –≤—ã–±—Ä–∞—Ç—å –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ç–∞—Ä–∏—Ñ
‚Ä¢ –û–±–µ—Å–ø–µ—á–∏–≤–∞—Ç—å –±—ã—Å—Ç—Ä—É—é –∏ –±–µ–∑–æ–ø–∞—Å–Ω—É—é –æ–ø–ª–∞—Ç—É
‚Ä¢ –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—Ç—å –≤—Å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è—Ö

üéØ <b>–ë–ª–∏–∂–∞–π—à–µ–µ —Å–æ–±—ã—Ç–∏–µ:</b>
<b>HALLOWEEN GEDAN PARTY</b> üéÉüëª
02.11.2025 | 19:00 | –°–ª–æ–±–æ–¥—Å–∫–æ–π –ø–µ—Ä–µ—É–ª–æ–∫ 6

–ì–æ—Ç–æ–≤—ã –æ–∫—É–Ω—É—Ç—å—Å—è –≤ –∞—Ç–º–æ—Å—Ñ–µ—Ä—É —Ö—ç–ª–ª–æ—É–∏–Ω—Å–∫–æ–π –º–∞–≥–∏–∏? –í—ã–±–∏—Ä–∞–π —Ä–∞–∑–¥–µ–ª –Ω–∏–∂–µ! üëá
    """
    
    keyboard = [
        [types.KeyboardButton(text="üìÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏")],
        [types.KeyboardButton(text="üé´ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–∞—Ä–∏—Ñ—ã"), types.KeyboardButton(text="üí¨ –ü–æ–º–æ—â—å")]
    ]
    
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω - –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
    if is_admin(message.from_user.id):
        keyboard.append([types.KeyboardButton(text="üë®‚Äçüíº –ö–æ–Ω—Å–æ–ª—å –ê–¥–º–∏–Ω–∞")])
    
    markup = types.ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)
    
    await message.answer(welcome_text, reply_markup=markup, parse_mode="HTML")

# –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ú–ï–†–û–ü–†–ò–Ø–¢–ò–ò - –§–û–¢–û –ò –û–ü–ò–°–ê–ù–ò–ï –í –û–î–ù–û–ú –°–û–û–ë–©–ï–ù–ò–ò
@dp.message(F.text == "üìÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏")
async def button_event_info(message: types.Message):
    log_event(message.from_user.id, message.from_user.username, "üìÖ –ó–ê–ü–†–û–°–ò–õ(-–∞) –ò–ù–§–û –û –ú–ï–†–û–ü–†–ò–Ø–¢–ò–ò")
    
    event_text = """
<b>HALLOWEEN GEDAN PARTY üéÉüëª</b>

üóì <b>–ö–æ–≥–¥–∞:</b> 02.11.2025
üåô <b>–í—Ä–µ–º—è:</b> 19:00  
üìç <b>–ú–µ—Å—Ç–æ:</b> –°–ª–æ–±–æ–¥—Å–∫–æ–π –ø–µ—Ä–µ—É–ª–æ–∫ 6, —Å—Ç—Ä 3

‚ú® <b>–ß—Ç–æ –∂–¥—ë—Ç –≤–Ω—É—Ç—Ä–∏:</b>
‚Ä¢ SPOOKY DJ SET - –ø—É–≥–∞—é—â–µ-–∫–∞—á–∞—é—â–∏–µ —Ç—Ä–µ–∫–∏
‚Ä¢ AUTHOR COCTAILS - —Å—Ç—Ä–∞—à–Ω–æ –∑–∞–≤–æ—Ä–∞–∂–∏–≤–∞—é—â–∏–µ –∫–æ–∫—Ç–µ–π–ª–∏
‚Ä¢ HORRIFYING COSTUMES - –±–∏—Ç–≤–∞ –∫–æ—Å—Ç—é–º–æ–≤ —Å –ø—Ä–∏–∑–∞–º–∏ üèÜ
‚Ä¢ DEADLY GAMES - —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–µ —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∏–≥—Ä—ã
‚Ä¢ Swag and spooky vibes ‚ò†Ô∏èüçÄ

üéØ <b>–ë–∏—Ç–≤–∞ –∫–æ—Å—Ç—é–º–æ–≤:</b>
‚Ä¢ –õ—É—á—à–∏–π –∫–æ—Å—Ç—é–º –ø–æ–ª—É—á–∞–µ—Ç –ø—Ä–∏–∑ –æ—Ç –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
‚Ä¢ –ö—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—å –∏ —Ö–æ—Ä—Ä–æ—Ä-—ç—Å—Ç–µ—Ç–∏–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é—Ç—Å—è
‚Ä¢ –ñ—é—Ä–∏ –∏–∑ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–æ–≤ –∏ –≥–æ—Å—Ç–µ–π –≤–µ—á–µ—Ä–∏–Ω–∫–∏

‚ö° <i>–î–∞–º—ã –∏ –≥–æ—Å–ø–æ–¥–∞! –ü—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ–º –≤–∞—à–µ–º—É –≤–Ω–∏–º–∞–Ω–∏—é –ø–µ—Ä–≤—É—é —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫—É—é –≤–µ—á–µ—Ä–∏–Ω–∫—É!</i>

–ì–æ—Ç–æ–≤—ã —Å—Ç–∞—Ç—å —á–∞—Å—Ç—å—é —Å–∞–º–æ–≥–æ –∂–∏–≤–æ–≥–æ —Å—Ç—Ä–∞—Ö–∞? –í—ã–±–∏—Ä–∞–π —Ç–∞—Ä–∏—Ñ –Ω–∏–∂–µ!
    """
    
    keyboard = [
        [types.InlineKeyboardButton(text="üé´ –í–´–ë–†–ê–¢–¨ –¢–ê–†–ò–§", callback_data="show_tariffs")],
        [types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–ê–ó–ê–î", callback_data="back_to_main")]
    ]
    markup = types.InlineKeyboardMarkup(inline_keyboard=keyboard)
    
    # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –° –û–ü–ò–°–ê–ù–ò–ï–ú –í –û–î–ù–û–ú –°–û–û–ë–©–ï–ù–ò–ò
    try:
        if os.path.exists(EVENT_IMAGE_PATH):
            photo = FSInputFile(EVENT_IMAGE_PATH)
            await message.answer_photo(
                photo,
                caption=event_text,
                reply_markup=markup,
                parse_mode="HTML"
            )
        else:
            print(f"‚ö†Ô∏è –§–∞–π–ª {EVENT_IMAGE_PATH} –Ω–µ –Ω–∞–π–¥–µ–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç")
            await message.answer(event_text, reply_markup=markup, parse_mode="HTML")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ: {e}")
        # –ï—Å–ª–∏ —Ñ–æ—Ç–æ –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–æ—Å—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
        await message.answer(event_text, reply_markup=markup, parse_mode="HTML")

# –ü–û–ö–ê–ó –¢–ê–†–ò–§–û–í
@dp.message(F.text == "üé´ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–∞—Ä–∏—Ñ—ã")
async def cmd_tariffs(message: types.Message, state: FSMContext):
    log_event(message.from_user.id, message.from_user.username, "üé´ –ó–ê–ü–†–û–°–ò–õ(-–∞) –¢–ê–†–ò–§–´")
    await show_tariffs_menu(message, state)

async def show_tariffs_menu(message: types.Message, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —Ç–∞—Ä–∏—Ñ–æ–≤"""
    male_keyboard = [
        [types.InlineKeyboardButton(text="üë§ –ï–¥–∏–Ω–æ–ª–∏—á–Ω—ã–π", callback_data="tariff_–ï–¥–∏–Ω–æ–ª–∏—á–Ω—ã–π")],
        [types.InlineKeyboardButton(text="üë• –õ–î", callback_data="tariff_–õ–î")],
        [types.InlineKeyboardButton(text="üë•üë• –ö–æ–º–ø–∞–Ω–∏—è –¥—Ä—É–∑–µ–π", callback_data="tariff_–ö–æ–º–ø–∞–Ω–∏—è –¥—Ä—É–∑–µ–π")]
    ]
    
    female_keyboard = [
        [types.InlineKeyboardButton(text="üßç‚Äç‚ôÄÔ∏è –°–∏–ª—å–Ω–∞—è –∏ –Ω–µ–∑–∞–≤–∏—Å–∏–º–∞—è", callback_data="tariff_–°–∏–ª—å–Ω–∞—è –∏ –Ω–µ–∑–∞–≤–∏—Å–∏–º–∞—è")],
        [types.InlineKeyboardButton(text="üë≠ –õ–ü", callback_data="tariff_–õ–ü")],
        [types.InlineKeyboardButton(text="üë≠üë≠ –°–µ—Ä–ø–µ–Ω—Ç–∞—Ä–∏–π", callback_data="tariff_–°–µ—Ä–ø–µ–Ω—Ç–∞—Ä–∏–π")]
    ]
    
    mixed_keyboard = [
        [types.InlineKeyboardButton(text="üë©‚Äç‚ù§Ô∏è‚Äçüë® –ò–Ω—å-—è–Ω—å", callback_data="tariff_–ò–Ω—å-—è–Ω—å")]
    ]
    
    back_button = [[types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–ê–ó–ê–î", callback_data="back_to_main")]]
    
    tariffs_intro = """
<b>–í–´–ë–ï–†–ò –°–í–û–ô –ü–£–¢–¨ –ù–ê HALLOWEEN GEDAN PARTY üí∞</b>

–ö–∞–∂–¥—ã–π —Ç–∞—Ä–∏—Ñ ‚Äî —ç—Ç–æ –Ω–µ –ø—Ä–æ—Å—Ç–æ –±–∏–ª–µ—Ç, —ç—Ç–æ —Ç–≤–æ–π —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –æ–ø—ã—Ç –∏ –∫–æ–º—å—é–Ω–∏—Ç–∏!
    """
    
    await message.answer(tariffs_intro, parse_mode="HTML")
    
    await message.answer("<b>ü¶Å –î–õ–Ø –ü–ê–†–ù–ï–ô</b>", parse_mode="HTML")
    markup = types.InlineKeyboardMarkup(inline_keyboard=male_keyboard)
    await message.answer("–í—ã–±–µ—Ä–∏ —Å–≤–æ–π —Å—Ç–∏–ª—å:", reply_markup=markup)
    
    await message.answer("<b>üå∏ –î–õ–Ø –î–ï–í–û–ß–ï–ö</b>", parse_mode="HTML")
    markup = types.InlineKeyboardMarkup(inline_keyboard=female_keyboard)
    await message.answer("–¢–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç:", reply_markup=markup)
    
    await message.answer("<b>üíû –î–õ–Ø –ü–ê–†</b>", parse_mode="HTML")
    markup = types.InlineKeyboardMarkup(inline_keyboard=mixed_keyboard)
    await message.answer("–î–ª—è –≤–ª—é–±–ª–µ–Ω–Ω—ã—Ö:", reply_markup=markup)
    
    markup_back = types.InlineKeyboardMarkup(inline_keyboard=back_button)
    await message.answer("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=markup_back)
    
    await state.set_state(OrderStates.waiting_for_tariff)

# –û–ë–†–ê–ë–û–¢–ö–ê –í–´–ë–û–†–ê –¢–ê–†–ò–§–ê
@dp.callback_query(F.data.startswith("tariff_"))
async def process_tariff_selection(callback: types.CallbackQuery, state: FSMContext):
    try:
        tariff_name = callback.data.replace("tariff_", "")
        log_tariff_selection(callback.from_user.id, callback.from_user.username, tariff_name, TARIFFS[tariff_name])
        
        if tariff_name not in TARIFFS:
            await callback.answer(f"‚ùå –¢–∞—Ä–∏—Ñ '{tariff_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        tariff = TARIFFS[tariff_name]
        await state.update_data(selected_tariff=tariff_name)
        
        description = f"{tariff['emoji']} <b>¬´{tariff_name}¬ª</b>\n"
        
        if 'total' in tariff:
            description += f"üíµ <b>{tariff['price']}‚ÇΩ —Å —á–µ–ª–æ–≤–µ–∫–∞</b>\n"
            description += f"üí≥ <b>–í—Å–µ–≥–æ: {tariff['total']}‚ÇΩ</b>\n"
        else:
            description += f"üíµ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å: {tariff['price']}‚ÇΩ</b>\n"
        
        description += f"\nüìñ {tariff['description']}\n"
        description += f"\n‚úÖ <b>–í–∫–ª—é—á–µ–Ω–æ:</b>\n"
        description += f"‚Ä¢ {tariff['includes']}\n"
        description += f"‚Ä¢ –ü–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –Ω–∞ Halloween Gedan Party\n"
        description += f"‚Ä¢ –£—á–∞—Å—Ç–∏–µ –≤ –±–∏—Ç–≤–µ –∫–æ—Å—Ç—é–º–æ–≤\n"
        description += f"‚Ä¢ SPOOKY DJ SET –∏ —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∏–≥—Ä—ã\n"
        description += f"‚Ä¢ –ê–≤—Ç–æ—Ä—Å–∫–∏–µ –∫–æ–∫—Ç–µ–π–ª–∏ –∏ –∑–∞–∫—É—Å–∫–∏\n"

        if tariff['min_people'] == 1:
            message_text = f"{description}\n\nüìù <b>–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:</b>\n<code>–§–ò–û, —Ç–µ–ª–µ–≥—Ä–∞–º–º, –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞</code>\n\n<b>–ü—Ä–∏–º–µ—Ä:</b>\n<code>–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á, @ivanov, 79991234567</code>"
        else:
            message_text = f"{description}\n\nüìù <b>–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤—Å–µ—Ö {tariff['min_people']} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:</b>\n–ö–∞–∂–¥—ã–π —É—á–∞—Å—Ç–Ω–∏–∫ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏:\n<code>–§–ò–û, —Ç–µ–ª–µ–≥—Ä–∞–º–º, –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞</code>\n\n<b>–ü—Ä–∏–º–µ—Ä –¥–ª—è {tariff['min_people']} —á–µ–ª–æ–≤–µ–∫:</b>\n<code>–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á, @ivanov, 79991234567</code>\n<code>–ü–µ—Ç—Ä–æ–≤–∞ –ê–Ω–Ω–∞ –°–µ—Ä–≥–µ–µ–≤–Ω–∞, @petrova, 79997654321</code>"
        
        keyboard = [[types.InlineKeyboardButton(text="‚¨ÖÔ∏è –í–´–ë–†–ê–¢–¨ –î–†–£–ì–û–ô –¢–ê–†–ò–§", callback_data="back_to_tariffs")]]
        markup = types.InlineKeyboardMarkup(inline_keyboard=keyboard)
        
        await callback.message.edit_text(message_text, reply_markup=markup, parse_mode="HTML")
        await state.set_state(OrderStates.waiting_for_participants)
        await callback.answer(f"‚úÖ –í—ã–±—Ä–∞–Ω: {tariff_name}")
        
    except Exception as e:
        error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ç–∞—Ä–∏—Ñ–∞: {e}"
        print(f"üî¥ {error_msg}")
        log_event(callback.from_user.id, callback.from_user.username, "‚ùå –û–®–ò–ë–ö–ê –í–´–ë–û–†–ê –¢–ê–†–ò–§–ê", str(e))
        await callback.answer("‚ùå –û—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞", show_alert=True)

# –û–ë–†–ê–ë–û–¢–ö–ê –í–í–û–î–ê –î–ê–ù–ù–´–• –£–ß–ê–°–¢–ù–ò–ö–û–í - –î–û–ë–ê–í–õ–Ø–ï–ú –°–û–•–†–ê–ù–ï–ù–ò–ï tariff_name
@dp.message(OrderStates.waiting_for_participants)
async def process_participants_input(message: types.Message, state: FSMContext):
    try:
        user_data = await state.get_data()
        tariff_name = user_data['selected_tariff']
        tariff = TARIFFS[tariff_name]
        
        log_event(message.from_user.id, message.from_user.username, "üìù –í–í–ï–õ(-–∞) –î–ê–ù–ù–´–ï –£–ß–ê–°–¢–ù–ò–ö–û–í", f"–¢–∞—Ä–∏—Ñ: {tariff_name}")
        
        # –ü–∞—Ä—Å–∏–º –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        lines = [line.strip() for line in message.text.strip().split('\n') if line.strip()]
        
        if len(lines) != tariff['min_people']:
            error_msg = f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(lines)} –≤–º–µ—Å—Ç–æ {tariff['min_people']}"
            log_event(message.from_user.id, message.from_user.username, "‚ùå –û–®–ò–ë–ö–ê –í–í–û–î–ê", error_msg)
            await message.answer(
                f"‚ùå –î–ª—è —Ç–∞—Ä–∏—Ñ–∞ '{tariff_name}' –Ω—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å —Ä–æ–≤–Ω–æ {tariff['min_people']} —É—á–∞—Å—Ç–Ω–∏–∫–∞.\n"
                f"–¢—ã —É–∫–∞–∑–∞–ª(-–∞) {len(lines)}. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ (–∫–∞–∂–¥—ã–π —É—á–∞—Å—Ç–Ω–∏–∫ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏):\n\n"
                f"<b>–§–æ—Ä–º–∞—Ç –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞:</b>\n–§–ò–û, —Ç–µ–ª–µ–≥—Ä–∞–º–º, –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞\n\n"
                f"<b>–ü—Ä–∏–º–µ—Ä –¥–ª—è {tariff['min_people']} —á–µ–ª–æ–≤–µ–∫:</b>\n"
                f"–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á, @ivanov, 79991234567\n"
                f"–ü–µ—Ç—Ä–æ–≤–∞ –ê–Ω–Ω–∞ –°–µ—Ä–≥–µ–µ–≤–Ω–∞, @petrova, 79997654321"
            )
            return
        
        participants = []
        errors = []
        
        for i, line in enumerate(lines, 1):
            parts = [part.strip() for part in line.split(',')]
            if len(parts) != 3:
                errors.append(f"‚ùå –£—á–∞—Å—Ç–Ω–∏–∫ {i}: –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ù—É–∂–Ω–æ: –§–ò–û, —Ç–µ–ª–µ–≥—Ä–∞–º–º, —Ç–µ–ª–µ—Ñ–æ–Ω")
                continue
            
            full_name, telegram, phone = parts
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
            if len(full_name) < 2:
                errors.append(f"‚ùå –£—á–∞—Å—Ç–Ω–∏–∫ {i}: –§–ò–û —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ")
                continue
                
            if not telegram.startswith('@'):
                errors.append(f"‚ùå –£—á–∞—Å—Ç–Ω–∏–∫ {i}: —Ç–µ–ª–µ–≥—Ä–∞–º–º –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å @")
                continue
                
            if not phone.replace('+', '').isdigit() or len(phone) < 10:
                errors.append(f"‚ùå –£—á–∞—Å—Ç–Ω–∏–∫ {i}: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞")
                continue
            
            participants.append({
                "full_name": full_name,
                "telegram": telegram,
                "phone": phone
            })
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å –æ—à–∏–±–∫–∏ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ö
        if errors:
            error_text = "<b>‚ùå –û—à–∏–±–∫–∏ –≤ –¥–∞–Ω–Ω—ã—Ö:</b>\n" + "\n".join(errors)
            error_text += f"\n\n<b>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑. –§–æ—Ä–º–∞—Ç –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞:</b>\n–§–ò–û, —Ç–µ–ª–µ–≥—Ä–∞–º–º, —Ç–µ–ª–µ—Ñ–æ–Ω\n\n<b>–ü—Ä–∏–º–µ—Ä:</b>\n–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω, @ivanov, 79991234567"
            await message.answer(error_text, parse_mode="HTML")
            return
        
        # –°–û–•–†–ê–ù–Ø–ï–ú –í–°–ï –î–ê–ù–ù–´–ï –í –°–û–°–¢–û–Ø–ù–ò–ï
        total_price = tariff.get('total', tariff['price'])
        await state.update_data(
            participants=participants,
            tariff_name=tariff_name,  # –î–û–ë–ê–í–õ–Ø–ï–ú –≠–¢–û!
            total_price=total_price   # –î–û–ë–ê–í–õ–Ø–ï–ú –≠–¢–û!
        )
        
        keyboard = [
            [types.InlineKeyboardButton(text="üí≥ –ü–ï–†–ï–ô–¢–ò –ö –û–ü–õ–ê–¢–ï", callback_data="proceed_to_payment")],
            [types.InlineKeyboardButton(text="‚¨ÖÔ∏è –í–´–ë–†–ê–¢–¨ –î–†–£–ì–û–ô –¢–ê–†–ò–§", callback_data="back_to_tariffs")]
        ]
        markup = types.InlineKeyboardMarkup(inline_keyboard=keyboard)
        
        participants_text = ""
        for i, participant in enumerate(participants, 1):
            participants_text += f"üë§ <b>–£—á–∞—Å—Ç–Ω–∏–∫ {i}:</b>\n"
            participants_text += f"   ‚Ä¢ –§–ò–û: {participant['full_name']}\n"
            participants_text += f"   ‚Ä¢ Telegram: {participant['telegram']}\n"
            participants_text += f"   ‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω: {participant['phone']}\n\n"
        
        summary_text = f"""
<b>‚úÖ –í–ê–® –ó–ê–ö–ê–ó –ü–û–î–¢–í–ï–†–ñ–î–Å–ù! üé´</b>

{participants_text}
üìã <b>–¢–∞—Ä–∏—Ñ:</b> {tariff['emoji']} {tariff_name}
üíé <b>–°—É–º–º–∞:</b> {total_price}‚ÇΩ

üé≠ <b>–°–∏—Å—Ç–µ–º–∞ –±—Ä–∞—Å–ª–µ—Ç–æ–≤:</b>
üü¢ –ó–µ–ª–µ–Ω—ã–π - –æ—Ç–∫—Ä—ã—Ç –∫ –æ–±—â–µ–Ω–∏—é
üî¥ –ö—Ä–∞—Å–Ω—ã–π - –≤ —Å–≤–æ–µ–º –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ

<i>–¶–≤–µ—Ç –º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç —É –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞</i>

–ù–∞–∂–º–∏—Ç–µ –Ω–∏–∂–µ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è ‚¨áÔ∏è
        """
        
        await message.answer(summary_text, reply_markup=markup, parse_mode="HTML")
        await state.set_state(OrderStates.waiting_for_payment)
        
    except Exception as e:
        error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ –¥–∞–Ω–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {e}"
        print(f"üî¥ {error_msg}")
        log_event(message.from_user.id, message.from_user.username, "‚ùå –û–®–ò–ë–ö–ê –í–í–û–î–ê –î–ê–ù–ù–´–•", str(e))
        await message.answer("‚ùå –û—à–∏–±–∫–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å–Ω–æ–≤–∞ —Å /start")

# –û–ë–†–ê–ë–û–¢–ö–ê –û–ü–õ–ê–¢–´ - –£–ü–†–û–©–ê–ï–ú –õ–û–ì–ò–ö–£
@dp.callback_query(F.data == "proceed_to_payment")
async def process_payment(callback: types.CallbackQuery, state: FSMContext):
    try:
        # –ü–û–õ–£–ß–ê–ï–ú –í–°–ï –î–ê–ù–ù–´–ï –ò–ó –°–û–°–¢–û–Ø–ù–ò–Ø
        user_data = await state.get_data()
        
        # –ü–†–û–í–ï–†–Ø–ï–ú –ß–¢–û –í–°–ï –ù–ï–û–ë–•–û–î–ò–ú–´–ï –î–ê–ù–ù–´–ï –ï–°–¢–¨
        required_fields = ['selected_tariff', 'participants', 'total_price']
        missing_fields = [field for field in required_fields if field not in user_data]
        
        if missing_fields:
            error_msg = f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ: {missing_fields}"
            print(f"üî¥ {error_msg}")
            log_event(callback.from_user.id, callback.from_user.username, "‚ùå –û–®–ò–ë–ö–ê –î–ê–ù–ù–´–•", error_msg)
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ", show_alert=True)
            await state.clear()
            return
        
        tariff_name = user_data['selected_tariff']
        participants = user_data['participants']
        total_price = user_data['total_price']
        tariff = TARIFFS[tariff_name]
        
        log_payment_start(callback.from_user.id, callback.from_user.username, tariff_name, participants, total_price)
        
        # –£–ë–ò–†–ê–ï–ú –õ–ò–®–ù–ï–ï –û–ë–ù–û–í–õ–ï–ù–ò–ï –°–û–°–¢–û–Ø–ù–ò–Ø - –î–ê–ù–ù–´–ï –£–ñ–ï –ï–°–¢–¨
        payment_text = f"""
<b>–§–ò–ù–ê–õ–¨–ù–´–ô –®–ê–ì - –û–ü–õ–ê–¢–ê üí≥</b>

üéØ <b>–¢–∞—Ä–∏—Ñ:</b> {tariff_name}
üíé <b>–°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ:</b> {total_price}‚ÇΩ

üìã <b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –æ–ø–ª–∞—Ç–µ:</b>
1. –ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ {total_price}‚ÇΩ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –Ω–∏–∂–µ —Å—á–µ—Ç
2. –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ —á–µ–∫ –æ–± –æ–ø–ª–∞—Ç–µ –≤ –≤–∏–¥–µ PDF
3. –í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ —ç—Ç–æ—Ç —á–∞—Ç –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —á–µ–∫

‚ö†Ô∏è <b>–í–∞–∂–Ω–æ:</b>

‚Ä¢ –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ —á–µ–∫–∞
‚Ä¢ –ß–µ–∫ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Å—É–º–º—É –∏ –¥–∞—Ç—É –ø–µ—Ä–µ–≤–æ–¥–∞
‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–Ω–∏–º–∞–µ—Ç –¥–æ 24 —á–∞—Å–æ–≤
‚Ä¢ <b>–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:</b> PDF(–º–∞–∫—Å. 20MB)
‚Ä¢ –î–†–£–ì–ò–ï –§–û–†–ú–ê–¢–´ –ù–ï –ü–†–ò–ù–ò–ú–ê–Æ–¢–°–Ø!
        """
        
        keyboard = [
            [types.InlineKeyboardButton(text="‚úÖ –Ø –û–ü–õ–ê–¢–ò–õ –ò –ü–†–ò–®–õ–Æ –ß–ï–ö", callback_data="send_receipt")],
            [types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–ê–ó–ê–î –ö –¢–ê–†–ò–§–ê–ú", callback_data="back_to_tariffs")]
        ]
        markup = types.InlineKeyboardMarkup(inline_keyboard=keyboard)
        
        await callback.message.edit_text(payment_text, reply_markup=markup, parse_mode="HTML")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∫–≤–∏–∑–∏—Ç—ã
        await callback.message.answer(BANK_DETAILS, parse_mode="HTML")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–º–µ—Ä —Å—á–µ—Ç–∞ –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
        account_only = f"<code>{SBER_ACCOUNT}</code>"
        await callback.message.answer(account_only, parse_mode="HTML")
        
        await state.set_state(OrderStates.waiting_for_receipt)
        await callback.answer()
        
    except Exception as e:
        error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –∫ –æ–ø–ª–∞—Ç–µ: {e}"
        print(f"üî¥ {error_msg}")
        log_event(callback.from_user.id, callback.from_user.username, "‚ùå –û–®–ò–ë–ö–ê –ü–†–ò –û–ü–õ–ê–¢–ï", str(e))
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞", show_alert=True)

# –ù–ê–í–ò–ì–ê–¶–ò–Ø
@dp.callback_query(F.data == "back_to_tariffs")
async def back_to_tariffs(callback: types.CallbackQuery, state: FSMContext):
    log_event(callback.from_user.id, callback.from_user.username, "‚¨ÖÔ∏è –í–ï–†–ù–£–õ–°–Ø –ö –í–´–ë–û–†–£ –¢–ê–†–ò–§–û–í")
    await show_tariffs_menu(callback.message, state)
    await callback.answer()

@dp.callback_query(F.data == "back_to_main")
async def back_to_main(callback: types.CallbackQuery, state: FSMContext):
    log_event(callback.from_user.id, callback.from_user.username, "‚¨ÖÔ∏è –í–ï–†–ù–£–õ–°–Ø –í –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ")
    await state.clear()
    await show_main_menu(callback.message)
    await callback.answer()

@dp.callback_query(F.data == "show_tariffs")
async def show_tariffs(callback: types.CallbackQuery, state: FSMContext):
    log_event(callback.from_user.id, callback.from_user.username, "üé´ –ù–ê–ñ–ê–õ '–í–´–ë–†–ê–¢–¨ –¢–ê–†–ò–§'")
    await show_tariffs_menu(callback.message, state)
    await callback.answer()

# –û–ë–†–ê–ë–û–¢–ö–ê –û–¢–ü–†–ê–í–ö–ò –ß–ï–ö–ê
@dp.callback_query(F.data == "send_receipt")
async def send_receipt_request(callback: types.CallbackQuery, state: FSMContext):
    log_event(callback.from_user.id, callback.from_user.username, "üìé –ó–ê–ü–†–û–°–ò–õ –û–¢–ü–†–ê–í–ö–£ –ß–ï–ö–ê")
    
    await callback.message.answer(
        "üìé <b>–ü—Ä–∏—à–ª–∏—Ç–µ —á–µ–∫ –æ–± –æ–ø–ª–∞—Ç–µ</b>\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ PDF-—Ñ–∞–π–ª —Å —á–µ–∫–æ–º –ø–µ—Ä–µ–≤–æ–¥–∞.\n"
        "–ß–µ–∫ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å:\n"
        "‚Ä¢ –°—É–º–º—É –ø–µ—Ä–µ–≤–æ–¥–∞\n" 
        "‚Ä¢ –î–∞—Ç—É –∏ –≤—Ä–µ–º—è\n"
        "‚Ä¢ –ù–æ–º–µ—Ä —Å—á–µ—Ç–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª—è\n\n"
        "<b>–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:</b>\n"
        "‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 20MB\n"
        "‚Ä¢ –§–∞–π–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Ç–∞–µ–º—ã–º\n\n"
        "<b>–ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–µ–∫–∞ –≤–∞—à –∑–∞–∫–∞–∑ –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Å–∏—Å—Ç–µ–º—É.</b>",
        parse_mode="HTML"
    )
    await callback.answer()

# –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê –ß–ï–ö–û–í (—Ç–æ–ª—å–∫–æ Supabase)
@dp.message(OrderStates.waiting_for_receipt, F.document | F.photo)
async def process_receipt(message: types.Message, state: FSMContext):
    try:
        user_data = await state.get_data()
        tariff_name = user_data['tariff_name']
        participants = user_data['participants']
        total_price = user_data['total_price']
        
        log_event(message.from_user.id, message.from_user.username, "üìé –û–¢–ü–†–ê–í–ò–õ –ß–ï–ö", f"–¢–∞—Ä–∏—Ñ: {tariff_name}")
        
        # –ü–†–û–í–ï–†–ö–ê –†–ê–ó–ú–ï–†–ê –§–ê–ô–õ–ê –î–õ–Ø –î–û–ö–£–ú–ï–ù–¢–û–í
        if message.document:
            if message.document.file_size > MAX_FILE_SIZE:
                await message.answer(
                    f"‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π! –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: {MAX_FILE_SIZE // (1024*1024)}MB\n"
                    f"–í–∞—à —Ñ–∞–π–ª: {message.document.file_size // (1024*1024)}MB\n"
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –º–µ–Ω—å—à–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ –∏–ª–∏ —Å–¥–µ–ª–∞–π—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç."
                )
                return
            
            # –ü–†–û–í–ï–†–ö–ê –¢–ò–ü–ê –§–ê–ô–õ–ê
            file_name = message.document.file_name or "document"
            file_ext = os.path.splitext(file_name.lower())[1]
            
            if file_ext not in SUPPORTED_DOCUMENT_TYPES:
                await message.answer(
                    f"‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞: {file_ext}\n"
                    f"–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: PDF\n"
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —á–µ–∫ –≤ –æ–¥–Ω–æ–º –∏–∑ —ç—Ç–∏—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤."
                )
                return
        
        print(f"üíæ –ù–∞—á–∏–Ω–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –≤ –±–∞–∑—É –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è —á–µ–∫–∞...")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–∫–∞–∑ –≤ Supabase
        order = db.add_order(
            user_id=message.from_user.id,
            username=message.from_user.username,
            tariff=tariff_name,
            participants=participants,
            total_price=total_price
        )
        
        if not order:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.")
            await state.clear()
            return
        
        supabase_order_id = order['id']
        print(f"‚úÖ –ó–∞–∫–∞–∑ #{supabase_order_id} —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ Supabase")
        
        # –°–û–•–†–ê–ù–Ø–ï–ú –ò–ù–§–û–†–ú–ê–¶–ò–Æ –û –§–ê–ô–õ–ï
        file_info = None
        receipt_data = None
        
        if message.document:
            file_info = {
                'file_id': message.document.file_id,
                'file_type': 'document',
                'filename': message.document.file_name or f"receipt_{supabase_order_id}.pdf",
                'file_unique_id': message.document.file_unique_id,
                'file_size': message.document.file_size
            }
            print(f"üìé –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç-—á–µ–∫ –¥–ª—è –∑–∞–∫–∞–∑–∞ #{supabase_order_id}: {file_info['filename']} ({file_info['file_size']} bytes)")
            
        elif message.photo:
            # –î–ª—è —Ñ–æ—Ç–æ –±–µ—Ä–µ–º —Å–∞–º–æ–µ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ (–ø–æ—Å–ª–µ–¥–Ω–µ–µ –≤ –º–∞—Å—Å–∏–≤–µ)
            file_info = {
                'file_id': message.photo[-1].file_id,
                'file_type': 'photo', 
                'filename': f"receipt_photo_{supabase_order_id}.jpg",
                'file_unique_id': message.photo[-1].file_unique_id,
                'file_size': "unknown"
            }
            print(f"üìé –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ-—á–µ–∫ –¥–ª—è –∑–∞–∫–∞–∑–∞ #{supabase_order_id}")
        
        # –ó–ê–ì–†–£–ñ–ê–ï–ú –§–ê–ô–õ –í SUPABASE STORAGE
        if file_info:
            user_info = {
                'user_id': message.from_user.id,
                'username': message.from_user.username or 'unknown'
            }
            
            receipt_data = await upload_receipt_to_supabase(
                bot, 
                file_info['file_id'], 
                file_info['file_type'], 
                supabase_order_id,
                user_info
            )
            
            if receipt_data:
                print(f"‚úÖ –ß–µ–∫ –∑–∞–≥—Ä—É–∂–µ–Ω –≤ Supabase Storage: {receipt_data['file_name']}")
                log_event(message.from_user.id, message.from_user.username, 
                         "‚òÅÔ∏è –ß–ï–ö –ó–ê–ì–†–£–ñ–ï–ù –í SUPABASE", 
                         f"–§–∞–π–ª: {receipt_data['file_name']}, URL: {receipt_data['public_url']}")
            else:
                print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —á–µ–∫ –≤ Supabase Storage –¥–ª—è –∑–∞–∫–∞–∑–∞ #{supabase_order_id}")
        
        print(f"‚úÖ –ó–∞–∫–∞–∑ #{supabase_order_id} —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –±–∞–∑—É –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–µ–∫–∞")
        
        success_text = f"""
<b>‚úÖ –ß–ï–ö –ü–û–õ–£–ß–ï–ù –ò –ó–ê–ö–ê–ó –°–û–•–†–ê–ù–ï–ù!</b>

üì¶ <b>–ó–∞–∫–∞–∑:</b> #{supabase_order_id}
üéØ <b>–¢–∞—Ä–∏—Ñ:</b> {tariff_name}
üíé <b>–°—É–º–º–∞:</b> {total_price}‚ÇΩ

‚úÖ <b>–°—Ç–∞—Ç—É—Å:</b> –ó–∞–∫–∞–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Å–∏—Å—Ç–µ–º—É
‚è≥ <b>–û–∂–∏–¥–∞–π—Ç–µ:</b> –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤

{'‚òÅÔ∏è <b>–ß–µ–∫ –∑–∞–≥—Ä—É–∂–µ–Ω –≤ –æ–±–ª–∞—á–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ</b>' if receipt_data else 'üìé –§–∞–π–ª —á–µ–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω'}

üí¨ <b>–ü–æ –≤–æ–ø—Ä–æ—Å–∞–º:</b> @m5frls
        """
        
        await message.answer(success_text, parse_mode="HTML")
        await state.clear()
        
    except Exception as e:
        error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —á–µ–∫–∞: {e}"
        print(f"üî¥ {error_msg}")
        log_event(message.from_user.id, message.from_user.username, "‚ùå –û–®–ò–ë–ö–ê –û–ë–†–ê–ë–û–¢–ö–ò –ß–ï–ö–ê", str(e))
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —á–µ–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.")

# –ö–æ–Ω—Å–æ–ª—å –ê–¥–º–∏–Ω–∞
@dp.message(F.text == "üë®‚Äçüíº –ö–æ–Ω—Å–æ–ª—å –ê–¥–º–∏–Ω–∞")
async def button_admin_panel(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –ö–æ–Ω—Å–æ–ª—å –ê–¥–º–∏–Ω–∞"""
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–æ–Ω—Å–æ–ª–∏ –∞–¥–º–∏–Ω–∞")
        return
    
    log_admin_action(message.from_user.id, message.from_user.username, "üë®‚Äçüíº –û–¢–ö–†–´–õ(-–∞)–ö–û–ù–°–û–õ–¨ –ê–î–ú–ò–ù–ê")
    
    admin_text = """
<b>üë®‚Äçüíº –ö–û–ù–°–û–õ–¨ –ê–î–ú–ò–ù–ê</b>

üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
/stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–∑ Supabase
/orders - –≤—Å–µ –∑–∞–∫–∞–∑—ã

üîß <b>Supabase Storage:</b>
/check_storage - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
/recreate_bucket - –ø–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å bucket
/recreate_db - –ø–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
/debug_order [id] - –æ—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è

üë§ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞–º–∏:</b>
/pending - –æ–∂–∏–¥–∞—é—â–∏–µ –æ–ø–ª–∞—Ç—ã (—Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ —á–µ–∫–∞–º–∏)
/paid - –æ–ø–ª–∞—á–µ–Ω–Ω—ã–µ
/receipt [id] - –ø–æ–ª—É—á–∏—Ç—å —á–µ–∫ –¥–ª—è –∑–∞–∫–∞–∑–∞

üîÑ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞–º–∏:</b>
/approve [id] - –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É
/cancel [id] - –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑

üõ†Ô∏è <b>–£—Ç–∏–ª–∏—Ç—ã:</b>
/reset - —Å–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM

üí° <b>–ë—ã—Å—Ç—Ä—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
–ü—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤—ã—à–µ
    """
    
    await message.answer(admin_text, parse_mode="HTML")

# –ö–û–ú–ê–ù–î–ê –î–õ–Ø –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø PDF
@dp.message(Command("test_pdf"))
async def cmd_test_pdf(message: types.Message):
    """–¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã —Å PDF"""
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return
    
    test_text = """
<b>üß™ –¢–ï–°–¢ –†–ê–ë–û–¢–´ –° PDF</b>

–î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ PDF:
1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —á–µ–∫–∞ –∫–æ–º–∞–Ω–¥–æ–π /start
2. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ –∏ –≤–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ
3. –ù–∞ —ç—Ç–∞–ø–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ "–Ø –û–ü–õ–ê–¢–ò–õ –ò –ü–†–ò–°–õ–ê–õ –ß–ï–ö"
4. –û—Ç–ø—Ä–∞–≤—å—Ç–µ PDF —Ñ–∞–π–ª —Å —á–µ–∫–æ–º

<b>–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b>
‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: 20MB
‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: PDF
‚Ä¢ –§–∞–π–ª—ã —Ö—Ä–∞–Ω—è—Ç—Å—è –≤ Supabase Storage
‚Ä¢ –î–æ—Å—Ç—É–ø —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /pending

<b>–ï—Å–ª–∏ PDF –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç:</b>
1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
2. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ PDF
3. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞–∫ —Ñ–æ—Ç–æ
4. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /reset –¥–ª—è —Å–±—Ä–æ—Å–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    """
    
    await message.answer(test_text, parse_mode="HTML")

# –ù–û–í–´–ï –ö–û–ú–ê–ù–î–´ –î–õ–Ø –£–ü–†–ê–í–õ–ï–ù–ò–Ø –°–¢–ê–¢–£–°–ê–ú–ò
@dp.message(Command("approve"))
async def cmd_approve(message: types.Message):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã –∑–∞–∫–∞–∑–∞"""
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return
    
    try:
        args = message.text.split()
        if len(args) < 2:
            await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /approve <order_id>\n–ü—Ä–∏–º–µ—Ä: /approve 15")
            return
        
        order_id = args[1]
        
        if not order_id.isdigit():
            await message.answer("‚ùå Order ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
            return
        
        log_admin_action(message.from_user.id, message.from_user.username, "‚úÖ –ü–û–î–¢–í–ï–†–î–ò–õ(-–∞) –û–ü–õ–ê–¢–£", f"Order ID: {order_id}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ Supabase
        success = db.update_order_status(int(order_id), "paid", True)
        
        if success:
            await message.answer(f"‚úÖ –ó–∞–∫–∞–∑ #{order_id} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω –≤ –æ–ø–ª–∞—á–µ–Ω–Ω—ã–µ!")
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            order = db.get_order_by_id(int(order_id))
            if order and order['user_id']:
                try:
                    await bot.send_message(
                        order['user_id'],
                        f"üéâ <b>–í–ê–® –ó–ê–ö–ê–ó –ü–û–î–¢–í–ï–†–ñ–î–ï–ù!</b>\n\n"
                        f"–ó–∞–∫–∞–∑ #{order_id} —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.\n"
                        f"–ñ–¥–µ–º –≤–∞—Å –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏!\n\n"
                        f"üìÖ <b>HALLOWEEN GEDAN PARTY</b>\n"
                        f"üóì 02.11.2025 | 19:00\n"
                        f"üìç –°–ª–æ–±–æ–¥—Å–∫–æ–π –ø–µ—Ä–µ—É–ª–æ–∫ 6",
                        parse_mode="HTML"
                    )
                except Exception as e:
                    print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        else:
            await message.answer(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑ #{order_id}")
            
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞: {e}")

@dp.message(Command("cancel"))
async def cmd_cancel(message: types.Message):
    """–û—Ç–º–µ–Ω–∞ –∑–∞–∫–∞–∑–∞"""
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return
    
    try:
        args = message.text.split()
        if len(args) < 2:
            await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /cancel <order_id>\n–ü—Ä–∏–º–µ—Ä: /cancel 15")
            return
        
        order_id = args[1]
        
        if not order_id.isdigit():
            await message.answer("‚ùå Order ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
            return
        
        log_admin_action(message.from_user.id, message.from_user.username, "‚ùå –û–¢–ú–ï–ù–ò–õ –ó–ê–ö–ê–ó", f"Order ID: {order_id}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ Supabase
        success = db.update_order_status(int(order_id), "canceled")
        
        if success:
            await message.answer(f"‚ùå –ó–∞–∫–∞–∑ #{order_id} –æ—Ç–º–µ–Ω–µ–Ω!")
        else:
            await message.answer(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑ #{order_id}")
            
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –∑–∞–∫–∞–∑–∞: {e}")

# –ö–û–ù–°–û–õ–¨ –ê–î–ú–ò–ù–ê - –û–ë–ù–û–í–õ–ï–ù–ù–´–ï –ö–û–ú–ê–ù–î–´
@dp.message(Command("stats"))
async def cmd_stats(message: types.Message):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–∑ Supabase"""
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return
    
    log_admin_action(message.from_user.id, message.from_user.username, "üìä –ó–ê–ü–†–û–°–ò–õ –°–¢–ê–¢–ò–°–¢–ò–ö–£")
    
    try:
        stats = db.get_statistics()
        
        stats_text = f"""
<b>üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ò–ó SUPABASE</b>

üé´ <b>–û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:</b>
‚Ä¢ –í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: {stats['total_orders']}
‚Ä¢ ‚úÖ –û–ø–ª–∞—á–µ–Ω–Ω—ã—Ö: {stats['paid_orders']}
‚Ä¢ ‚è≥ –û–∂–∏–¥–∞—é—Ç –æ–ø–ª–∞—Ç—ã: {stats['pending_orders']}
‚Ä¢ üë• –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['unique_users']}
‚Ä¢ üí∞ –û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞: {stats['total_revenue']}‚ÇΩ

üìÖ <b>–ó–ê –°–ï–ì–û–î–ù–Ø:</b>
‚Ä¢ –ù–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤: {stats['today_orders']}
‚Ä¢ üí∞ –í—ã—Ä—É—á–∫–∞ —Å–µ–≥–æ–¥–Ω—è: {stats['today_revenue']}‚ÇΩ

üíæ <b>–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö:</b> Supabase
üïê <b>–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ:</b> {datetime.datetime.now().strftime('%H:%M:%S')}
        """
        
        await message.answer(stats_text, parse_mode="HTML")
        
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")

@dp.message(Command("orders"))
async def cmd_orders(message: types.Message):
    """–í—Å–µ –∑–∞–∫–∞–∑—ã –∏–∑ Supabase"""
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return
    
    log_admin_action(message.from_user.id, message.from_user.username, "üìã –ó–ê–ü–†–û–°–ò–õ –í–°–ï –ó–ê–ö–ê–ó–´")
    
    try:
        orders = db.get_all_orders(limit=15)
        
        if not orders:
            await message.answer("üì≠ –í –±–∞–∑–µ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤")
            return
        
        response = "<b>üìã –ü–û–°–õ–ï–î–ù–ò–ï 15 –ó–ê–ö–ê–ó–û–í:</b>\n\n"
        
        for order in orders:
            status_emoji = "‚úÖ" if order['status'] == 'paid' else "‚è≥"
            if order['status'] == 'canceled':
                status_emoji = "‚ùå"
                
            response += f"{status_emoji} <b>–ó–∞–∫–∞–∑ #{order['id']}</b>\n"
            response += f"üë§ @{order['username']} (ID: {order['user_id']})\n"
            response += f"üé´ –¢–∞—Ä–∏—Ñ: {order['tariff']}\n"
            response += f"üí∞ –°—É–º–º–∞: {order['total_price']}‚ÇΩ\n"
            response += f"üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(order['participants'])}\n"
            response += f"üìÖ –î–∞—Ç–∞: {order['created_at'][:16]}\n"
            response += f"üìä –°—Ç–∞—Ç—É—Å: {order['status']}\n\n"
        
        await message.answer(response, parse_mode="HTML")
        
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤: {e}")

# –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –ö–û–ú–ê–ù–î–ê /pending - –¢–ï–ü–ï–†–¨ –¢–û–õ–¨–ö–û –° SUPABASE
@dp.message(Command("pending"))
async def cmd_pending(message: types.Message):
    """–ó–∞–∫–∞–∑—ã –æ–∂–∏–¥–∞—é—â–∏–µ –æ–ø–ª–∞—Ç—ã –° –§–ê–ô–õ–ê–ú–ò –ò–ó SUPABASE STORAGE"""
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return
    
    log_admin_action(message.from_user.id, message.from_user.username, "‚è≥ –ó–ê–ü–†–û–°–ò–õ PENDING –ó–ê–ö–ê–ó–´ –° SUPABASE –ß–ï–ö–ê–ú–ò")
    
    try:
        orders = db.get_pending_orders()
        
        if not orders:
            await message.answer("‚úÖ –ù–µ—Ç –∑–∞–∫–∞–∑–æ–≤ –æ–∂–∏–¥–∞—é—â–∏—Ö –æ–ø–ª–∞—Ç—ã")
            return
        
        response = "<b>‚è≥ –ó–ê–ö–ê–ó–´ –û–ñ–ò–î–ê–Æ–©–ò–ï –û–ü–õ–ê–¢–´:</b>\n\n"
        
        for order in orders:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–∞ –≤ Supabase Storage
            supabase_file_info = await get_supabase_file_info(order['id'])
            
            if supabase_file_info:
                file_emoji = "üìÑ" if supabase_file_info['file_name'].endswith('.pdf') else "üì∏"
                file_info = f"{file_emoji} Supabase: {supabase_file_info['file_name']}"
                file_url = supabase_file_info['public_url']
            elif order.get('receipt_file_name'):
                file_emoji = "üìÑ" if order['receipt_file_name'].endswith('.pdf') else "üì∏"
                file_info = f"{file_emoji} Supabase DB: {order['receipt_file_name']}"
                file_url = order.get('receipt_file_url')
            else:
                file_info = "‚ùå –ù–µ—Ç —á–µ–∫–∞"
                file_url = None
                
            response += f"üÜî <b>–ó–∞–∫–∞–∑ #{order['id']}</b>\n"
            response += f"üë§ @{order['username']} (ID: {order['user_id']})\n"
            response += f"üé´ –¢–∞—Ä–∏—Ñ: {order['tariff']}\n"
            response += f"üí∞ –°—É–º–º–∞: {order['total_price']}‚ÇΩ\n"
            response += f"üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(order['participants'])}\n"
            response += f"üìÖ –°–æ–∑–¥–∞–Ω: {order['created_at'][:16]}\n"
            response += f"üìé –ß–µ–∫: {file_info}\n\n"
            
            if file_url:
                response += f"üîó <a href='{file_url}'>–°—Å—ã–ª–∫–∞ –Ω–∞ —á–µ–∫</a>\n\n"
        
        response += f"üìä –í—Å–µ–≥–æ: {len(orders)} –∑–∞–∫–∞–∑–æ–≤ –Ω–∞ —Å—É–º–º—É {sum(o['total_price'] for o in orders)}‚ÇΩ\n\n"
        response += "üìé <b>–û—Ç–ø—Ä–∞–≤–ª—è—é —á–µ–∫–∏ –∏–∑ Supabase Storage...</b>"
        
        await message.answer(response, parse_mode="HTML", disable_web_page_preview=True)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã —á–µ–∫–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–∞–∫–∞–∑–∞
        supabase_count = 0
        
        for order in orders:
            try:
                # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Ñ–∞–π–ª –∏–∑ Supabase Storage
                supabase_file_info = await get_supabase_file_info(order['id'])
                
                if supabase_file_info:
                    # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª –∏–∑ Supabase Storage
                    file_data = supabase_client.storage.from_("receipts").download(supabase_file_info['file_name'])
                    
                    if file_data:
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
                        temp_file = f"temp_{supabase_file_info['file_name']}"
                        with open(temp_file, 'wb') as f:
                            f.write(file_data)
                        
                        document = FSInputFile(temp_file)
                        
                        if supabase_file_info['file_name'].endswith('.pdf'):
                            await bot.send_document(
                                message.chat.id,
                                document,
                                caption=f"üìã <b>–ß–µ–∫ –∏–∑ Supabase –¥–ª—è –∑–∞–∫–∞–∑–∞ #{order['id']}</b>\n\n"
                                       f"üë§ @{order['username']}\n"
                                       f"üé´ –¢–∞—Ä–∏—Ñ: {order['tariff']}\n"
                                       f"üí∞ –°—É–º–º–∞: {order['total_price']}‚ÇΩ\n"
                                       f"üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(order['participants'])}\n"
                                       f"üìÖ –î–∞—Ç–∞: {order['created_at'][:16]}\n"
                                       f"‚òÅÔ∏è <b>–•—Ä–∞–Ω–∏–ª–∏—â–µ: Supabase Storage</b>\n"
                                       f"üîó <a href='{supabase_file_info['public_url']}'>–ü—Ä—è–º–∞—è —Å—Å—ã–ª–∫–∞</a>",
                                parse_mode="HTML"
                            )
                        else:
                            await bot.send_photo(
                                message.chat.id,
                                document,
                                caption=f"üìã <b>–ß–µ–∫ –∏–∑ Supabase –¥–ª—è –∑–∞–∫–∞–∑–∞ #{order['id']}</b>\n\n"
                                       f"üë§ @{order['username']}\n"
                                       f"üé´ –¢–∞—Ä–∏—Ñ: {order['tariff']}\n"
                                       f"üí∞ –°—É–º–º–∞: {order['total_price']}‚ÇΩ\n"
                                       f"üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(order['participants'])}\n"
                                       f"üìÖ –î–∞—Ç–∞: {order['created_at'][:16]}\n"
                                       f"‚òÅÔ∏è <b>–•—Ä–∞–Ω–∏–ª–∏—â–µ: Supabase Storage</b>\n"
                                       f"üîó <a href='{supabase_file_info['public_url']}'>–ü—Ä—è–º–∞—è —Å—Å—ã–ª–∫–∞</a>",
                                parse_mode="HTML"
                            )
                        
                        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                        os.remove(temp_file)
                        supabase_count += 1
                    else:
                        await message.answer(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª –¥–ª—è –∑–∞–∫–∞–∑–∞ #{order['id']}")
                else:
                    await message.answer(f"‚ùå –î–ª—è –∑–∞–∫–∞–∑–∞ #{order['id']} –Ω–µ—Ç –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–≥–æ —á–µ–∫–∞")
                    
            except Exception as e:
                await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —á–µ–∫–∞ –¥–ª—è –∑–∞–∫–∞–∑–∞ #{order['id']}: {e}")
                continue
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        stats_text = f"‚úÖ –í—Å–µ —á–µ–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã!\n\n"
        stats_text += f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
        stats_text += f"‚Ä¢ ‚òÅÔ∏è Supabase Storage: {supabase_count}\n"
        stats_text += f"‚Ä¢ üìã –í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: {len(orders)}"
        
        await message.answer(stats_text)
        
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è pending –∑–∞–∫–∞–∑–æ–≤: {e}")

@dp.message(Command("paid"))
async def cmd_paid(message: types.Message):
    """–û–ø–ª–∞—á–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã"""
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return
    
    log_admin_action(message.from_user.id, message.from_user.username, "‚úÖ –ó–ê–ü–†–û–°–ò–õ(-–∞) PAID –ó–ê–ö–ê–ó–´")
    
    try:
        orders = db.get_paid_orders()
        
        if not orders:
            await message.answer("üí∞ –ù–µ—Ç –æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤")
            return
        
        response = "<b>‚úÖ –û–ü–õ–ê–ß–ï–ù–ù–´–ï –ó–ê–ö–ê–ó–´:</b>\n\n"
        
        for order in orders[:10]:
            response += f"üé´ <b>–ó–∞–∫–∞–∑ #{order['id']}</b>\n"
            response += f"üë§ @{order['username']} (ID: {order['user_id']})\n"
            response += f"üìã –¢–∞—Ä–∏—Ñ: {order['tariff']}\n"
            response += f"üí∞ –°—É–º–º–∞: {order['total_price']}‚ÇΩ\n"
            response += f"üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(order['participants'])}\n"
            response += f"üìÖ –î–∞—Ç–∞: {order['created_at'][:16]}\n\n"
        
        if len(orders) > 10:
            response += f"üìé ... –∏ –µ—â–µ {len(orders) - 10} –∑–∞–∫–∞–∑–æ–≤\n"
        
        total_revenue = sum(o['total_price'] for o in orders)
        response += f"üí∞ <b>–û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞:</b> {total_revenue}‚ÇΩ"
        
        await message.answer(response, parse_mode="HTML")
        
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è paid –∑–∞–∫–∞–∑–æ–≤: {e}")

# –ö–û–ú–ê–ù–î–ê –î–õ–Ø –ü–û–õ–£–ß–ï–ù–ò–Ø –ö–û–ù–ö–†–ï–¢–ù–û–ì–û –ß–ï–ö–ê
@dp.message(Command("receipt"))
async def cmd_receipt(message: types.Message):
    """–ü–æ–ª—É—á–∏—Ç—å —á–µ–∫ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞"""
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return
    
    try:
        args = message.text.split()
        if len(args) < 2:
            await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /receipt <order_id>\n–ü—Ä–∏–º–µ—Ä: /receipt 15")
            return
        
        order_id = args[1]
        
        if not order_id.isdigit():
            await message.answer("‚ùå Order ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
            return
        
        log_admin_action(message.from_user.id, message.from_user.username, "üìÑ –ó–ê–ü–†–û–°–ò–õ –ß–ï–ö", f"Order ID: {order_id}")
        
        order = db.get_order_by_id(int(order_id))
        if not order:
            await message.answer(f"‚ùå –ó–∞–∫–∞–∑ #{order_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —Ñ–∞–π–ª –∏–∑ Supabase Storage
        supabase_file_info = await get_supabase_file_info(int(order_id))
        
        if supabase_file_info:
            # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª –∏–∑ Supabase Storage
            file_data = supabase_client.storage.from_("receipts").download(supabase_file_info['file_name'])
            
            if file_data:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
                temp_file = f"temp_{supabase_file_info['file_name']}"
                with open(temp_file, 'wb') as f:
                    f.write(file_data)
                
                document = FSInputFile(temp_file)
                
                if supabase_file_info['file_name'].endswith('.pdf'):
                    await bot.send_document(
                        message.chat.id,
                        document,
                        caption=f"üìã <b>–ß–µ–∫ –∏–∑ Supabase –¥–ª—è –∑–∞–∫–∞–∑–∞ #{order_id}</b>\n\n"
                               f"üë§ @{order['username']}\n"
                               f"üé´ –¢–∞—Ä–∏—Ñ: {order['tariff']}\n"
                               f"üí∞ –°—É–º–º–∞: {order['total_price']}‚ÇΩ\n"
                               f"üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(order['participants'])}\n"
                               f"üìÖ –î–∞—Ç–∞: {order['created_at'][:16]}\n"
                               f"üìä –°—Ç–∞—Ç—É—Å: {order['status']}\n"
                               f"‚òÅÔ∏è <b>–•—Ä–∞–Ω–∏–ª–∏—â–µ: Supabase Storage</b>\n"
                               f"üîó <a href='{supabase_file_info['public_url']}'>–ü—Ä—è–º–∞—è —Å—Å—ã–ª–∫–∞</a>",
                        parse_mode="HTML"
                    )
                else:
                    await bot.send_photo(
                        message.chat.id,
                        document,
                        caption=f"üìã <b>–ß–µ–∫ –∏–∑ Supabase –¥–ª—è –∑–∞–∫–∞–∑–∞ #{order_id}</b>\n\n"
                               f"üë§ @{order['username']}\n"
                               f"üé´ –¢–∞—Ä–∏—Ñ: {order['tariff']}\n"
                               f"üí∞ –°—É–º–º–∞: {order['total_price']}‚ÇΩ\n"
                               f"üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(order['participants'])}\n"
                               f"üìÖ –î–∞—Ç–∞: {order['created_at'][:16]}\n"
                               f"üìä –°—Ç–∞—Ç—É—Å: {order['status']}\n"
                               f"‚òÅÔ∏è <b>–•—Ä–∞–Ω–∏–ª–∏—â–µ: Supabase Storage</b>\n"
                               f"üîó <a href='{supabase_file_info['public_url']}'>–ü—Ä—è–º–∞—è —Å—Å—ã–ª–∫–∞</a>",
                        parse_mode="HTML"
                    )
                
                # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                os.remove(temp_file)
                await message.answer(f"‚úÖ –ß–µ–∫ –¥–ª—è –∑–∞–∫–∞–∑–∞ #{order_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∏–∑ Supabase Storage!")
                return
        
        await message.answer(f"‚ùå –î–ª—è –∑–∞–∫–∞–∑–∞ #{order_id} –Ω–µ—Ç –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–≥–æ —á–µ–∫–∞")
            
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–µ–∫–∞: {e}")

# –ü–û–ú–û–©–¨
@dp.message(F.text == "üí¨ –ü–æ–º–æ—â—å")
async def cmd_help(message: types.Message):
    log_event(message.from_user.id, message.from_user.username, "üí¨ –ó–ê–ü–†–û–°–ò–õ(-–∞) –ü–û–ú–û–©–¨")
    
    help_text = """
<b>–ü–û–ú–û–©–¨ –ò –ü–û–î–î–ï–†–ñ–ö–ê üÜò</b>

üìã <b>–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:</b>
‚Ä¢ –°—Ç–∞—Ä—Ç - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É
‚Ä¢ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏ - –¥–µ—Ç–∞–ª–∏ –≤–µ—á–µ—Ä–∏–Ω–∫–∏
‚Ä¢ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–∞—Ä–∏—Ñ—ã - –≤—ã–±—Ä–∞—Ç—å –±–∏–ª–µ—Ç
‚Ä¢ –ü–æ–º–æ—â—å - —ç—Ç–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è

üìû <b>–¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞:</b>
‚Ä¢ –ü–æ –≤–æ–ø—Ä–æ—Å–∞–º –æ–ø–ª–∞—Ç—ã: @m5frls
‚Ä¢ –ü–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—é: @m5frls
‚Ä¢ –ß–∞—Ç: t.me/gedanvecherinky

üí° <b>–ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã:</b>
‚Ä¢ –û–ø–ª–∞—Ç–∞: –ø–µ—Ä–µ–≤–æ–¥ –Ω–∞ –∫–∞—Ä—Ç—É –°–±–µ—Ä–±–∞–Ω–∫–∞
‚Ä¢ –í–æ–∑–≤—Ä–∞—Ç—ã: –∑–∞ 48 —á–∞—Å–æ–≤ –¥–æ —Å–æ–±—ã—Ç–∏—è
‚Ä¢ –î—Ä–µ—Å—Å-–∫–æ–¥: —Ö—ç–ª–ª–æ—É–∏–Ω-–∫–æ—Å—Ç—é–º—ã –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é—Ç—Å—è!
‚Ä¢ –ß–µ–∫–∏: –ø—Ä–∏–Ω–∏–º–∞–µ–º —Ç–æ–ª—å–∫–æ <b>PDF</b> (–º–∞–∫—Å. 20MB)
    """
    
    keyboard = [
        [types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–ê–ó–ê–î", callback_data="back_to_main")]
    ]
    markup = types.InlineKeyboardMarkup(inline_keyboard=keyboard)
    
    await message.answer(help_text, reply_markup=markup, parse_mode="HTML")

# –û–ë–†–ê–ë–û–¢–ö–ê –î–†–£–ì–ò–• –°–û–û–ë–©–ï–ù–ò–ô
@dp.message()
async def handle_other_messages(message: types.Message):
    log_event(message.from_user.id, message.from_user.username, "üí¨ –û–¢–ü–†–ê–í–ò–õ(-–∞) –°–û–û–ë–©–ï–ù–ò–ï", f"–¢–µ–∫—Å—Ç: {message.text}")
    await show_main_menu(message)

# –û–°–ù–û–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –ó–ê–ü–£–°–ö–ê
async def main():
    print("=" * 70)
    print("ü§ñ –ó–ê–ü–£–°–ö –ë–û–¢–ê - –¢–û–õ–¨–ö–û SUPABASE")
    print("=" * 70)
    
    # –°–æ–∑–¥–∞–µ–º bucket –¥–ª—è —á–µ–∫–æ–≤
    create_receipts_bucket()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
    print("üîç –ü–†–û–í–ï–†–ö–ê –°–ò–°–¢–ï–ú–´...")
    print(f"üìä Supabase: {'‚úÖ' if supabase_client else '‚ùå'}")
    print(f"‚òÅÔ∏è Supabase Storage: ‚úÖ Bucket 'receipts' —Å–æ–∑–¥–∞–Ω")
    print(f"üìé –•—Ä–∞–Ω–µ–Ω–∏–µ —á–µ–∫–æ–≤: ‚úÖ –û–±–ª–∞—á–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –≥–æ—Ç–æ–≤–æ")
    print(f"üìÑ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ PDF: ‚úÖ –ú–∞–∫—Å. —Ä–∞–∑–º–µ—Ä {MAX_FILE_SIZE // (1024*1024)}MB")
    print(f"üí≥ –°–±–µ—Ä–±–∞–Ω–∫: ‚úÖ {SBER_ACCOUNT}")
    print(f"üé´ –¢–∞—Ä–∏—Ñ—ã: {len(TARIFFS)} —à—Ç.")
    print(f"üñºÔ∏è –ö–∞—Ä—Ç–∏–Ω–∫–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è: {'‚úÖ' if os.path.exists(EVENT_IMAGE_PATH) else '‚ùå'}")
    print(f"üë®‚Äçüíº –ê–¥–º–∏–Ω—ã: {len(ADMIN_IDS)} —á–µ–ª–æ–≤–µ–∫")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É Supabase
    stats = db.get_statistics()
    print(f"üìà Supabase —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {stats['total_orders']} –∑–∞–∫–∞–∑–æ–≤, {stats['total_revenue']}‚ÇΩ –≤—ã—Ä—É—á–∫–∏")
    
    print("\nüéØ –û–°–ù–û–í–ù–´–ï –§–£–ù–ö–¶–ò–ò:")
    print("   ‚Ä¢ üé´ –í—ã–±–æ—Ä –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –∏ —Ç–∞—Ä–∏—Ñ–∞")
    print("   ‚Ä¢ üë• –í–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤") 
    print("   ‚Ä¢ üí≥ –û–ø–ª–∞—Ç–∞ –ø–µ—Ä–µ–≤–æ–¥–æ–º –Ω–∞ –∫–∞—Ä—Ç—É")
    print("   ‚Ä¢ üìé –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∞–ª—å–Ω—ã—Ö —á–µ–∫–æ–≤ (PDF, —Ñ–æ—Ç–æ)")
    print("   ‚Ä¢ ‚òÅÔ∏è 100% –û–ë–õ–ê–ß–ù–û–ï –•–†–ê–ù–ò–õ–ò–©–ï: Supabase –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –∏ —Ñ–∞–π–ª–æ–≤")
    print("   ‚Ä¢ üë®‚Äçüíº –ü—Ä–æ—Å–º–æ—Ç—Ä —Ä–µ–∞–ª—å–Ω—ã—Ö —á–µ–∫–æ–≤ –≤ –∞–¥–º–∏–Ω–∫–µ (/pending)")
    print("   ‚Ä¢ ‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã (/approve)")
    print("   ‚Ä¢ üõ†Ô∏è –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏–π (/reset)")
    print("=" * 70)
    
    try:
        print("üü¢ –ë–æ—Ç –Ω–∞—á–∞–ª —Ä–∞–±–æ—Ç—É...")
        await dp.start_polling(bot)
    except Exception as e:
        print(f"üî¥ –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}")
    finally:
        print("üü° –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

if __name__ == "__main__":
    asyncio.run(main())